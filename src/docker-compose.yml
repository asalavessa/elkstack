version: '3.3'
services:
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
        container_name: elasticsearch
        hostname: elasticsearch
        environment:
            - node.name=es01
            - cluster.name=es-docker-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms1024m -Xmx2048m"
            - discovery.type=single-node
            - ELASTIC_PASSWORD=elastic
            - TZ=Europe/London
            - xpack.license.self_generated.type=trial
            - xpack.security.enabled=true          
        volumes:
            - es_data:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - stack
        restart: on-failure

    kibana:
        image: docker.elastic.co/kibana/kibana:7.13.4
        container_name: kibana
        hostname: kibana
        environment:
            - "ES_JAVA_OPTS=-Xms1024m -Xmx2048m"
        ports:
            - 5601:5601
        volumes:
            - ./configs/yaml/kibana.yml:/usr/share/kibana/config/kibana.yml
            - kibana_data:/usr/share/kibana/data
        networks:
            - stack

    logstash:
        image: logstash:7.13.4
        container_name: logstash
        hostname: logstash
        environment:
            http.host: "0.0.0.0"
            xpack.monitoring.elasticsearch.hosts: "http://elasticsearch:9200"
            xpack.monitoring.elasticsearch.username: elastic
            xpack.monitoring.elasticsearch.password: elastic
            xpack.monitoring.enabled: true
        environment:
            LS_JAVA_OPTS: "-Xmx2048m -Xms1024m"
            TZ: Europe/London
        volumes:
            - ./configs/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
            - ./configs/driver:/usr/share/empty:ro
            - ./configs/plugin:/home
            - ./input/files:/usr/tmp:ro
            - ./input/database/mongo/temp:/opt:rw
        command: bash -c "bin/logstash-plugin install /home/logstash-input-mongodb-0.4.2.3.gem && logstash -f /usr/share/logstash/pipeline/logstash.conf"
        networks:
            - stack
        ports:
            - "5000:5000/tcp"
            - "5000:5000/udp"
        depends_on:
            - elasticsearch
        restart: on-failure

    filebeat:
        image: elastic/filebeat:7.13.4
        container_name: filebeat
        hostname: filebeat
        user: root
        volumes:
            - ./configs/yaml/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
            - ./input/logs:/var/log
            - /home/sample-app/todolist-app/log/nginx/:/var/log/nginx
        command: ["-strict.perms=false"]
        environment:
            TZ: Europe/London
        networks:
            - stack
        depends_on:
            - elasticsearch
            - kibana
        restart: on-failure
    
    metricbeat:
        image: elastic/metricbeat:7.13.4
        container_name: metricbeat
        hostname: filebeat
        user: root
        volumes:
            - /:/hostfs:ro
            - /proc:/hostfs/proc:ro
            - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./configs/yaml/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
        command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
        environment:
            TZ: Europe/London
        networks:
            - stack
        depends_on:
            - elasticsearch
            - kibana
        restart: on-failure

    logspout:
        image: bekt/logspout-logstash
        container_name: logspout
        hostname: logspout
        environment:
            ROUTE_URIS: logstash://logstash:5000
            TZ: Europe/London
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - stack
        depends_on:
            - logstash
        restart: on-failure
        
    mysql:
        image: mysql:8.0.20
        container_name: mysql
        hostname: mysql
        environment:
            MYSQL_ROOT_PASSWORD: root
            TZ: Europe/London
        volumes:
            - ./input/database/mysql:/docker-entrypoint-initdb.d:ro
            - ./input/logs/mysql/mysql-service:/var/log:ro
        networks:
            - stack
        ports:
            - 3306:3306
        restart: on-failure
        
#    adminer:
#        image: adminer:4.7.7
#        container_name: adminer
#        hostname: adminer
#        environment:
#            ADMINER_DEFAULT_SERVER: mysql
#        networks:
#            - stack
#        ports:
#            - 8080:8080
#        depends_on:
#            - mysql
#        restart: on-failure
#        
#    mongodb:
#        image: mongo:4.2.6
#        container_name: mongodb
#        hostname: mongodb
#        environment:
#            MONGO_INITDB_ROOT_USERNAME: root
#            MONGO_INITDB_ROOT_PASSWORD: root
#            ME_CONFIG_BASICAUTH_USERNAME: admin
#            ME_CONFIG_BASICAUTH_PASSWORD: admin
#            ME_CONFIG_MONGODB_PORT: 27017
#            TZ: Europe/London
#        volumes:
#            - ./input/database/mongo/init:/docker-entrypoint-initdb.d:ro
#            - ./input/logs/mongo/mongo-service:/var/log/mongodb:rw
#        networks:
#            - stack
#        ports:
#            - 27017:27017
#        restart: on-failure
#        
#    mongo-express:
#        image: mongo-express:0.54.0
#        container_name: mongo-express
#        hostname: mongo-express
#        environment:
#            ME_CONFIG_MONGODB_ADMINUSERNAME: root
#            ME_CONFIG_MONGODB_ADMINPASSWORD: root
#            TZ: Europe/London
#        networks:
#            - stack
#        ports:
#            - 8081:8081
#        depends_on:
#            - mongodb
#        restart: on-failure

volumes:
    es_data:
        driver: local
    kibana_data:
        driver: local
    
networks:
    stack:
        driver: bridge