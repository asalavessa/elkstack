https://en.wikipedia.org/wiki/Docker_(software)

Docker (software)

Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating system kernel and therefore use fewer resources than virtual machines.[8]

The service has both free and premium tiers. The software that hosts the containers is called Docker Engine.[8] It was first started in 2013 and is developed by Docker, Inc.[9]

Docker Inc. was founded by Solomon Hykes and Sebastien Pahl during the Y Combinator Summer 2010 startup incubator group and launched in 2011.[10] Hykes started the Docker project in France as an internal project within dotCloud, a platform-as-a-service company.[11]

Docker debuted to the public in Santa Clara at PyCon in 2013.[12] It was released as open-source in March 2013.[13] At the time, it used LXC as its default execution environment. One year later, with the release of version 0.9, Docker replaced LXC with its own component, which was written in the Go programming language.[14][15]

In 2017, Docker created the Moby project for open research and development.[16]

September 19, 2013: Red Hat and Docker announced a collaboration around Fedora, Red Hat Enterprise Linux (RHEL), and OpenShift.[17]
October 15, 2014: Microsoft announced the integration of the Docker engine into Windows Server, as well as native support for the Docker client role in Windows.[18][19]
November 2014: Docker container services were announced for the Amazon Elastic Compute Cloud (EC2).[20]
November 10, 2014: Docker announced a partnership with Stratoscale.[21]
December 4, 2014: IBM announced a strategic partnership with Docker that enables Docker to integrate more closely with the IBM Cloud.[22]
June 22, 2015: Docker and several other companies announced that they are working on a new vendor and operating-system-independent standard for software containers.[23][24]
April 2016: Windocks, an independent ISV released a port of Docker's open source project to Windows, supporting Windows Server 2012 R2 and Server 2016, with all editions of SQL Server 2008 onward.[25]
May 2016: analysis showed the following organizations as main contributors to Docker: The Docker team, Cisco, Google, Huawei, IBM, Microsoft, and Red Hat.[26]
June 8, 2016: Microsoft announced that Docker now could be used natively on Windows 10.[27]
January 2017: An analysis of LinkedIn profile mentions showed Docker presence grew by 160% in 2016.[28]
May 6, 2019: Microsoft announced the second version of Windows Subsystem for Linux (WSL). Docker, Inc. announced that it has started working on a version of Docker for Windows that runs on WSL 2.[29]
Operation

Docker can use different interfaces to access virtualization features of the Linux kernel.[30]
Docker can package an application and its dependencies in a virtual container that can run on any Linux server. This helps provide flexibility and portability enabling the application to be run in various locations, whether on-premises, in a public cloud, or in a private cloud.[31] Docker uses the resource isolation features of the Linux kernel (such as cgroups and kernel namespaces) and a union-capable file system (such as OverlayFS)[32] to allow containers to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.[33] Because Docker containers are lightweight, a single server or virtual machine can run several containers simultaneously.[34] A 2018 analysis found that a typical Docker use case involves running eight containers per host, but that a quarter of analyzed organizations run 18 or more per host.[35]

The Linux kernel's support for namespaces mostly[36] isolates an application's view of the operating environment, including process trees, network, user IDs and mounted file systems, while the kernel's cgroups provide resource limiting for memory and CPU.[37] Since version 0.9, Docker includes its own component (called "libcontainer") to directly use virtualization facilities provided by the Linux kernel, in addition to using abstracted virtualization interfaces via libvirt, LXC and systemd-nspawn.[14][38][30][31]

The Docker software as a service offering consists of three components:

Software: The Docker daemon, called dockerd, is a persistent process that manages Docker containers and handles container objects. The daemon listens for requests sent via the Docker Engine API.[39][40] The Docker client program, called docker, provides a command-line interface that allows users to interact with Docker daemons.[41][39]
Objects: Docker objects are various entities used to assemble an application in Docker. The main classes of Docker objects are images, containers, and services.[39]
A Docker container is a standardized, encapsulated environment that runs applications.[42] A container is managed using the Docker API or CLI.[39]
A Docker image is a read-only template used to build containers. Images are used to store and ship applications.[39]
A Docker service allows containers to be scaled across multiple Docker daemons. The result is known as a swarm, a set of cooperating daemons that communicate through the Docker API.[39]
Registries: A Docker registry is a repository for Docker images. Docker clients connect to registries to download ("pull") images for use or upload ("push") images that they have built. Registries can be public or private. Two main public registries are Docker Hub and Docker Cloud. Docker Hub is the default registry where Docker looks for images.[43][39] Docker registries also allow the creation of notifications based on events.[44]

Docker Compose is a tool for defining and running multi-container Docker applications.[45] It uses YAML files to configure the application's services and performs the creation and start-up process of all the containers with a single command. The docker-compose CLI utility allows users to run commands on multiple containers at once, for example, building images, scaling containers, running containers that were stopped, and more.[46] Commands related to image manipulation, or user-interactive options, are not relevant in Docker Compose because they address one container.[47] The docker-compose.yml file is used to define an application's services and includes various configuration options. For example, the build option defines configuration options such as the Dockerfile path, the command option allows one to override default Docker commands, and more.[48] The first public beta version of Docker Compose (version 0.0.1) was released on December 21, 2013.[49] The first production-ready version (1.0) was made available on October 16, 2014.[50]
Docker Swarm provides native clustering functionality for Docker containers, which turns a group of Docker engines into a single virtual Docker engine.[51] In Docker 1.12 and higher, Swarm mode is integrated with Docker Engine.[52] The docker swarm CLI[53] utility allows users to run Swarm containers, create discovery tokens, list nodes in the cluster, and more.[54] The docker node CLI utility allows users to run various commands to manage nodes in a swarm, for example, listing the nodes in a swarm, updating nodes, and removing nodes from the swarm.[55] Docker manages swarms using the Raft Consensus Algorithm. According to Raft, for an update to be performed, the majority of Swarm nodes need to agree on the update.[56][57]

...


